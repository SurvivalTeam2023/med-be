name: CD
on:
  push:
    branches:
      - deployment
jobs:
  Build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node: [16]
    env:
      NODE_ENV: "development"
    name: Build
    steps:  
      - name: Checkout üõé
        uses: actions/checkout@v3

      - name: Setup Node üèó
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
         node-version: ${{ matrix.node }}
         cache: 'yarn'

      - name: install dependency
        run: yarn

      - name: lint check 
        run: yarn lint

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR Public
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      - name: Build, tag, and push docker image to Amazon ECR Public
        env:
          REGISTRY: ${{ secrets.REGISTRY }}
          REGISTRY_ALIAS: ${{ secrets.REGISTRY_ALIAS }}
          REPOSITORY: ${{ secrets.REPOSITORY }}
          IMAGE_TAG: "banhsbao-${{ steps.format-time.outputs.replaced }}"
        run: |
          docker build -t $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG .
          docker push $REGISTRY/$REGISTRY_ALIAS/$REPOSITORY:$IMAGE_TAG

  deploy:
    needs: build
    name: deploy uni-be
    runs-on: ubuntu-latest
    steps:
    - name: deploy to cluster
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        EKS_DEPLOYMENT: ${{ secrets.EKS_DEPLOYMENT }}
        IMAGE_TAG: "banhsbao-${{ steps.format-time.outputs.replaced }}"
      with:
        args: set image deployment/$EKS_DEPLOYMENT $ECR_REPOSITORY=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        
    - name: verify deployment
      uses: kodermax/kubectl-aws-eks@master
      env:
        KUBE_CONFIG_DATA: ${{ secrets.KUBE_CONFIG_DATA }}
      with:
        args: rollout status deployment/my-app
    - name: say Oye
      run: echo Ohayo Oni chan :3